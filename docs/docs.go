// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/database/health": {
            "get": {
                "description": "Gets the state of the connected database",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "database"
                ],
                "summary": "Returns the state of the connected database",
                "responses": {
                    "200": {
                        "description": "Returns database health status",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/database/migrations": {
            "post": {
                "description": "Runs the database migrations from GORM",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "database"
                ],
                "summary": "Runs the migrations from GORM",
                "responses": {
                    "200": {
                        "description": "Retuns success message",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Retuns any errors",
                        "schema": {}
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "Gets all the users",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Returns all the users",
                "responses": {
                    "200": {
                        "description": "Returns a pagenated list of users",
                        "schema": {
                            "$ref": "#/definitions/userModel.UserDTO"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new user with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Creates a new user",
                "parameters": [
                    {
                        "description": "User details",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/userModel.UserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Returns the created user",
                        "schema": {
                            "$ref": "#/definitions/userModel.UserDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/id": {
            "get": {
                "description": "Gets the user where ID is passed in the user_id header",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Returns the user with the specified ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID to retrieve",
                        "name": "user_id",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the requested user",
                        "schema": {
                            "$ref": "#/definitions/userModel.UserDTO"
                        }
                    },
                    "400": {
                        "description": "Missing or invalid user ID header",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Updates the user where ID is passed in the user_id header with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Updates the user with the specified ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID to update",
                        "name": "user_id",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "User update details",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/userModel.UserDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated user",
                        "schema": {
                            "$ref": "#/definitions/userModel.UserDTO"
                        }
                    },
                    "400": {
                        "description": "Missing or invalid user ID header or invalid request body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes the user where ID is passed in the user_id header",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Deletes the user with the specified ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID to delete",
                        "name": "user_id",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfull deletion returns the model of the deleted user",
                        "schema": {
                            "$ref": "#/definitions/userModel.UserDTO"
                        }
                    },
                    "400": {
                        "description": "Missing or invalid user ID header",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "userModel.UserDTO": {
            "type": "object",
            "properties": {
                "bio": {
                    "type": "string"
                },
                "deactivatedAt": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "emailVerified": {
                    "type": "boolean"
                },
                "id": {
                    "type": "integer"
                },
                "isActive": {
                    "description": "Status",
                    "type": "boolean"
                },
                "isBanned": {
                    "type": "boolean"
                },
                "lastLogin": {
                    "type": "string"
                },
                "locale": {
                    "description": "Preferences",
                    "type": "string"
                },
                "profilePicture": {
                    "description": "Profile",
                    "type": "string"
                },
                "timezone": {
                    "type": "string"
                },
                "username": {
                    "description": "Authentication",
                    "type": "string"
                }
            }
        },
        "userModel.UserRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
