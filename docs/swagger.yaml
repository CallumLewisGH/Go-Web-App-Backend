definitions:
  userModel.CreateUserRequest:
    properties:
      authId:
        type: string
      email:
        type: string
      username:
        type: string
    type: object
  userModel.UpdateUserRequest:
    properties:
      bio:
        type: string
      email:
        type: string
      profilePicture:
        type: string
      timezone:
        type: string
      username:
        type: string
    type: object
  userModel.UserDTO:
    properties:
      authId:
        type: string
      bio:
        type: string
      createdAt:
        type: string
      deactivatedAt:
        type: string
      email:
        type: string
      emailVerified:
        type: boolean
      id:
        type: string
      isActive:
        description: Status
        type: boolean
      isBanned:
        type: boolean
      lastLogin:
        type: string
      locale:
        description: Preferences
        type: string
      profilePicture:
        description: Profile
        type: string
      timezone:
        type: string
      updatedAt:
        type: string
      username:
        description: Authentication
        type: string
    type: object
info:
  contact: {}
paths:
  /authentication/callback:
    post:
      consumes:
      - application/json
      description: Handles the callback from Google OAuth2, creates user if new, and
        sets JWT cookie
      parameters:
      - description: OAuth state token
        in: query
        name: state
        required: true
        type: string
      - description: OAuth authorization code
        in: query
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "302":
          description: Redirects to /home on success
          schema:
            type: string
        "400":
          description: Invalid state token
          schema: {}
        "409":
          description: Returns error if username derived from email is already in
            use
          schema: {}
        "500":
          description: Returns error if token exchange, user info fetch, or JWT generation
            fails
          schema: {}
      summary: Google OAuth2 callback
      tags:
      - authentication
  /authentication/login:
    get:
      description: Redirects to Google's OAuth2 consent page
      produces:
      - application/json
      responses:
        "302":
          description: Redirects to Google OAuth
          schema:
            type: string
        "500":
          description: Returns error if session state cannot be generated
          schema: {}
      summary: Initiate Google OAuth2 login
      tags:
      - authentication
  /authentication/logout:
    post:
      description: Clears the JWT cookie, effectively logging out the user
      produces:
      - application/json
      responses:
        "200":
          description: Returns success message
          schema:
            type: object
      summary: Logout current user
      tags:
      - authentication
  /authentication/user:
    get:
      description: Returns information about the currently authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: Returns user object
          schema:
            $ref: '#/definitions/userModel.UserDTO'
        "404":
          description: User not found
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Get authenticated user info
      tags:
      - authentication
  /database/health:
    get:
      description: Gets the state of the connected database
      produces:
      - application/json
      responses:
        "200":
          description: Returns database health status
          schema:
            type: string
      summary: Returns the state of the connected database
      tags:
      - database
  /database/migrations:
    post:
      description: Runs the database migrations from GORM
      produces:
      - application/json
      responses:
        "200":
          description: Retuns success message
          schema:
            type: string
        "500":
          description: Retuns any errors
          schema: {}
      summary: Runs the migrations from GORM
      tags:
      - database
  /users:
    get:
      description: Gets all the users
      produces:
      - application/json
      responses:
        "200":
          description: Returns a pagenated list of users
          schema:
            $ref: '#/definitions/userModel.UserDTO'
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Returns all the users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Creates a new user with the provided details
      parameters:
      - description: User details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/userModel.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Returns the created user
          schema:
            $ref: '#/definitions/userModel.UserDTO'
        "400":
          description: Invalid request body
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Creates a new user
      tags:
      - users
  /users/id:
    delete:
      description: Deletes the user where ID is passed in the user_id header
      parameters:
      - description: User ID to delete
        in: header
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfull deletion returns the model of the deleted user
          schema:
            $ref: '#/definitions/userModel.UserDTO'
        "400":
          description: Missing or invalid user ID header
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Deletes the user with the specified ID
      tags:
      - users
    get:
      description: Gets the user where ID is passed in the user_id header
      parameters:
      - description: User ID to retrieve
        in: header
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Returns the requested user
          schema:
            $ref: '#/definitions/userModel.UserDTO'
        "400":
          description: Missing or invalid user ID header
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Returns the user with the specified ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Updates the user where ID is passed in the user_id header with
        the provided details
      parameters:
      - description: User ID to update
        in: header
        name: user_id
        required: true
        type: string
      - description: User update details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/userModel.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated user
          schema:
            $ref: '#/definitions/userModel.UserDTO'
        "400":
          description: Missing or invalid user ID header or invalid request body
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Updates the user with the specified ID
      tags:
      - users
swagger: "2.0"
